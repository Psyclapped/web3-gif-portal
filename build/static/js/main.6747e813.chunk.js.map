{"version":3,"sources":["assets/twitter-logo.svg","App.js","index.js"],"names":["SystemProgram","web3","arr","Keypair","Object","values","kp","_keypair","secretKey","secret","Uint8Array","baseAccount","fromSecretKey","programID","PublicKey","idl","metadata","address","network","clusterApiUrl","opts","TWITTER_HANDLE","TWITTER_LINK","App","useState","walletAddress","setWalletAddress","inputValue","setInputValue","gifList","setGifList","checkIfWalletIsConnected","a","window","solana","isPhantom","console","log","connect","onlyIfTrusted","response","publicKey","toString","alert","error","connectWallet","sendGif","length","provider","getProvider","program","Program","rpc","addGif","accounts","user","wallet","getGifList","onInputChange","event","value","target","connection","Connection","Provider","createGifAccount","startStuffOff","systemProgram","programId","signers","useEffect","onLoad","addEventListener","removeEventListener","account","fetch","className","onClick","onSubmit","preventDefault","type","placeholder","onChange","map","item","index","src","gifLink","alt","twitterLogo","href","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6747e813.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/twitter-logo.d89d9a86.svg\";","/*\n * We are going to be using the useEffect hook!\n */\nimport React, { useEffect, useState } from 'react';\nimport twitterLogo from './assets/twitter-logo.svg';\nimport './App.css';\nimport { Connection, PublicKey, clusterApiUrl } from '@solana/web3.js';\nimport { Program, Provider, web3 } from '@project-serum/anchor';\nimport idl from './idl.json';\nimport kp from './keypair.json';\n\n// systemprogram is a reference to the solana runtime\nconst { SystemProgram, Keypair } = web3;\n\nconst arr = Object.values(kp._keypair.secretKey)\nconst secret = new Uint8Array(arr)\nconst baseAccount = web3.Keypair.fromSecretKey(secret)\n\n// get our program's id from the IDL file.\nconst programID = new PublicKey(idl.metadata.address);\n\n// set out network to devnet\nconst network = clusterApiUrl('devnet');\n\n// controls how we want to acknowledge when a transaction is \"done\"\nconst opts = {\n  preflightCommitment: \"processed\"\n}\n\n// Change this up to be your Twitter if you want.\nconst TWITTER_HANDLE = 'psyclapped';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nconst TEST_GIFS = [\n  'https://media.giphy.com/media/3o7btLwXZ9XqQZqZyY/giphy.gif',\n]\n\nconst App = () => {\n  /*\n   * This function holds the logic for deciding if a Phantom Wallet is\n   * connected or not\n   */\n\n  // State declaration\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [inputValue, setInputValue] = useState('');\n  const [gifList, setGifList] = useState([]);\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { solana } = window;\n\n      if (solana) {\n        if (solana.isPhantom) {\n          console.log('Phantom wallet found!');\n          /*\n          The solana object gives us a function that will allow\n          us to connect directly with the user's wallet!\n          */\n          const response = await solana.connect({ onlyIfTrusted: true });\n          console.log(\n            `Connected with Public Key:`,\n            response.publicKey.toString()\n          );\n          /*\n          set the user's publicKey in state to be used later\n          */\n          setWalletAddress(response.publicKey.toString());\n        }\n      } else {\n        alert('Solana object not found! Get a Phantom Wallet ðŸ‘»');\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const connectWallet = async () => {\n    const { solana } = window;\n    if (solana) {\n      const response = await solana.connect();\n      console.log(`Connected with Public Key: ${response.publicKey.toString()}`);\n      setWalletAddress(response.publicKey.toString());\n    }\n  }\n\n  const sendGif = async () => {\n    if (inputValue.length === 0) {\n      console.log(\"No GIF link provided!\");\n      return\n    }\n    setInputValue('');\n    console.log('GIF Link:', inputValue);\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      await program.rpc.addGif(inputValue, {\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n        },\n      });\n      console.log(\"GIF successfully sent to program\", inputValue)\n      await getGifList();\n    } catch (error) {\n      console.log(\"Error sending GIF:\", error);\n    }\n  };\n\n  const onInputChange = (event) => {\n    const { value } = event.target;\n    setInputValue(value);\n  }\n\n  const getProvider = () => {\n    const connection = new Connection(network, opts.preflightCommitment);\n    const provider = new Provider(\n      connection, window.solana, opts.preflightCommitment,\n    );\n    return provider;\n  }\n\n  const createGifAccount = async () => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      console.log(\"ping\");\n      await program.rpc.startStuffOff({\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n          systemProgram: SystemProgram.programId,\n        },\n        signers: [baseAccount],\n      });\n      console.log(\"Created a new BaseAccount w/ address:\", baseAccount.publicKey.toString())\n      await getGifList();\n    } catch (error) {\n      console.log(\"Error creating a new BaseAccount:\", error);\n    }\n  }\n\n  const renderNotConnectedContainer = () => (\n    <button\n      className=\"cta-button connect-wallet-button\"\n      onClick={connectWallet}\n    >\n      Connect to Wallet\n    </button>\n  );\n\n  const renderConnectedContainer = () => {\n    // If we hit this, it means the program account hasn't been initialized.\n    if (gifList === null) {\n      return (\n        <div className=\"connected-container\">\n          <button className=\"cta-button submit-gif-button\" onClick={createGifAccount}>\n            Do One-Time Initialization For GIF Program Account\n          </button>\n        </div>\n      )\n    }\n    // Otherwise, we're good! Account exists. User can submit GIFs.\n    else {\n      return (\n        <div className=\"connected-container\">\n          <form\n            onSubmit={(event) => {\n              event.preventDefault();\n              sendGif();\n            }}\n          >\n            <input\n              type=\"text\"\n              placeholder=\"Enter gif link!\"\n              value={inputValue}\n              onChange={onInputChange}\n            />\n            <button type=\"submit\" className=\"cta-button submit-gif-button\">\n              Submit\n            </button>\n          </form>\n          <div className=\"gif-grid\">\n            {/* We use index as the key instead, also, the src is now item.gifLink */}\n            {gifList.map((item, index) => (\n              <div className=\"gif-item\" key={index}>\n                <img src={item.gifLink} />\n              </div>\n            ))}\n          </div>\n        </div>\n      )\n    }\n  }\n\n  /*\n   * When our component first mounts, let's check to see if we have a connected\n   * Phantom Wallet\n   */\n  useEffect(() => {\n    const onLoad = async () => {\n      await checkIfWalletIsConnected();\n    };\n    window.addEventListener('load', onLoad);\n    return () => window.removeEventListener('load', onLoad);\n  }, []);\n\n  const getGifList = async () => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      const account = await program.account.baseAccount.fetch(baseAccount.publicKey);\n      console.log(\"Got the account\", account);\n      setGifList(account.gifList);\n    } catch (error) {\n      console.log(\"Error in getGifList: \", error);\n      setGifList(null);\n    }\n  }\n\n  useEffect(() => {\n    if (walletAddress) {\n      console.log(`Fetching GIF list...`);\n      // call solana program here.\n\n      // set state\n      getGifList();\n    }\n  }, [walletAddress]);\n\n  return (\n    <div className=\"App\">\n      <div className={walletAddress ? 'authed-container' : 'container'}>\n        <div className=\"header-container\">\n          <p className=\"header\">Community GIF Project</p>\n          <p className=\"sub-text\">\n            âœ¨ View Our GIF Collection In The Metaverse âœ¨\n            {!walletAddress && renderNotConnectedContainer()}\n            {walletAddress && renderConnectedContainer()}\n          </p>\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`follow me @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}